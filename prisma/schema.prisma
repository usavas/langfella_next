// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ReadingGroup {
  id         String    @id @default(uuid())
  language   Language  @relation(fields: [languageId], references: [id])
  languageId Int
  title      String
  authors    Author[]
  Reading    Reading[]
}

model Reading {
  id             Int           @id @default(autoincrement())
  language       Language      @relation(fields: [languageId], references: [id])
  languageId     Int
  title          String
  source         String?
  authors        Author[]
  readingGroup   ReadingGroup? @relation(fields: [readingGroupId], references: [id])
  readingGroupId String?
  contents       ContentItem[]
  UserReading    UserReading[]
}

model ContentItem {
  id        Int         @id @default(autoincrement())
  tag       HtmlItemTag
  content   String
  reading   Reading?    @relation(fields: [readingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  readingId Int?
}

enum HtmlItemTag {
  h1
  h2
  h3
  h4
  h5
  h6
  p
  img
  blockquote
  ul
  ol
  table
}

model Language {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  name         String
  WordSource   Word[]         @relation("sourceLanguage")
  WordTarget   Word[]         @relation("targetLanguage")
  HtmlPage     Reading[]
  UILang       UserSettings[] @relation("UILang")
  DictLang     UserSettings[] @relation("DictLang")
  ReadingGroup ReadingGroup[]
}

model Author {
  id            Int            @id @default(autoincrement())
  firstName     String
  lastName      String
  Readings      Reading[]
  ReadingGroups ReadingGroup[]
}

model Word {
  id               Int      @id @default(autoincrement())
  text             String
  translation      String[] @default([])
  status           String
  sourceLanguage   Language @relation("sourceLanguage", fields: [sourceLangId], references: [id])
  sourceLangId     Int
  targetLanguage   Language @relation("targetLanguage", fields: [targetLangId], references: [id])
  targetLangId     Int
  exampleSentences String[] @default([])

  userReadingId Int?
  userReading   UserReading? @relation(fields: [userReadingId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  UserSettings UserSettings[]
  UserReading  UserReading[]
}

model UserReading {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingId Int
  reading   Reading @relation(fields: [readingId], references: [id], onDelete: Cascade)
  wordIds   Int[]   @default([])
  Word      Word[]

  @@unique([userId, readingId], name: "userReadingIdentifier")
}

model UserSettings {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  /// App's UI Language
  UILang     Language @relation("UILang", fields: [UILangId], references: [id])
  UILangId   Int
  /// Words will be translated into this language ///TODO consider allowing multiple languages at a time
  DictLangId Int
  DictLang   Language @relation("DictLang", fields: [DictLangId], references: [id])
}
